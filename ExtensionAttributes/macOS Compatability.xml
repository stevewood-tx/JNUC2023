<?xml version="1.0" encoding="UTF-8"?><extensionAttribute>
<displayName>macOS Compatability</displayName>
<description/>
<dataType>string</dataType>
<scriptContentsMac>#!/bin/bash&#13;
# set -x&#13;
&#13;
####################################################################################################&#13;
# Script Name:  Get-LatestOSSupported.sh&#13;
# By:  Zack Thompson / Created:  9/26/2017&#13;
# Version:  2.5.2 / Updated:  9/6/2023 / By:  ZT&#13;
#&#13;
# Description:  A Jamf Pro Extension Attribute to check the latest compatible version of macOS.&#13;
#&#13;
# New Feature:  When running as standalone script, you can pass a Model number and OS version&#13;
# 				to the script to validate regex.&#13;
# 	EXAMPLE&#13;
# 		$ bash ./Get-LatestOSSupported.sh "MacBookPro13,3" "12.0"&#13;
# 		Test OS value: 12.0&#13;
# 		Test Model value: MacBookPro13,3&#13;
# 		&lt;result&gt;Monterey&lt;/result&gt;&#13;
#&#13;
#	Courtesy of Nic Wendlowsky (@hkystar35)&#13;
#&#13;
# Updates:  For each OS version released, a new Regex string and each function will need to be&#13;
#			updated.&#13;
#&#13;
#	System Requirements can be found here:&#13;
#		Full List - https://support.apple.com/en-us/HT211683&#13;
#		Sonoma (Preview) - https://www.apple.com/macos/sonoma-preview/&#13;
#		Ventura - https://support.apple.com/en-us/HT213265 / https://support.apple.com/en-us/HT213264&#13;
#			* Apple has never publicly posted storage requirements for Ventura, which is why this&#13;
#			  script identifies Ventura support with an asterisk, e.g. `Ventura*`&#13;
#		Monterey - https://support.apple.com/en-us/HT212551&#13;
#		Big Sur - https://support.apple.com/en-us/HT211238 / https://support.apple.com/kb/sp833&#13;
#			* If running Mountain Lion 10.8, device will need to upgrade to El Capitan 10.11 first.&#13;
#			  first.  See:&#13;
#			* https://web.archive.org/web/20211018042220/https://www.apple.com/macos/how-to-upgrade/&#13;
#		Catalina - https://support.apple.com/en-us/HT210222 / https://support.apple.com/kb/SP803&#13;
#		Mojave - https://support.apple.com/kb/SP777&#13;
#			* MacPro5,1's = https://support.apple.com/en-us/HT208898&#13;
#		High Sierra - https://support.apple.com/kb/SP765&#13;
#		Sierra - https://support.apple.com/kb/sp742&#13;
#		El Capitan - https://support.apple.com/kb/sp728&#13;
#&#13;
####################################################################################################&#13;
&#13;
##################################################&#13;
# Define test values&#13;
&#13;
# Allow for specifying a Model and OS Version to the script to validate regex.&#13;
# If these values are passed, the write_to_ea_history function is ignored so that incorrect&#13;
# information is not written to the test computer.&#13;
# Supported actions:&#13;
# 	TEST_MODEL - example: "MacBookPro13,3"&#13;
# 	TEST_OS - example: "14.0"&#13;
&#13;
TEST_MODEL="${1}"&#13;
TEST_OS="${2}"&#13;
&#13;
##################################################&#13;
# Define organization's environment values&#13;
&#13;
# Locally log EA value which can be collected with a simple `defaults read` allowing this script&#13;
# to be ran from a Policy or other method, instead of an actual EA.  Also allows the reported&#13;
# value to be collected and used within other scripts/workflows.&#13;
# Supported actions:&#13;
#   true - Do locally Log&#13;
#   false - Do not log locally&#13;
locally_log="true"&#13;
local_inventory="/opt/ManagedFrameworks/Inventory.plist"&#13;
&#13;
##################################################&#13;
# Define Regex Strings to exclude Mac Models that *do not support* each OS Version&#13;
not_elcapitan_or_older_regex="^((MacPro|Macmini|MacBookPro)[1-2],[0-9]|iMac[1-6],[0-9]|MacBook[1-4],[0-9]|MacBookAir1,[0-9])$"&#13;
not_highsierra_regex="^(MacPro[1-4],[0-9]|iMac[1-9],[0-9]|Macmini[1-3],[0-9]|(MacBook|MacBookPro)[1-5],[0-9]|MacBookAir[1-2],[0-9])$"&#13;
not_mojave_regex="^(MacPro[1-4],[0-9]|iMac([1-9]|1[0-2]),[0-9]|Macmini[1-5],[0-9]|MacBook[1-7],[0-9]|MacBookAir[1-4],[0-9]|MacBookPro[1-8],[0-9])$"&#13;
not_catalina_regex="^(MacPro[1-5],[0-9]|iMac([1-9]|1[0-2]),[0-9]|Macmini[1-5],[0-9]|MacBook[1-7],[0-9]|MacBookAir[1-4],[0-9]|MacBookPro[1-8],[0-9])$"&#13;
not_bigsur_regex="^(MacPro[1-5],[0-9]|iMac((([1-9]|1[0-3]),[0-9])|14,[0-3])|Macmini[1-6],[0-9]|MacBook[1-7],[0-9]|MacBookAir[1-5],[0-9]|MacBookPro([1-9]|10),[0-9])$"&#13;
not_monterey_regex="^(MacPro[1-5],[0-9]|iMac([1-9]|1[0-5]),[0-9]|(Macmini|MacBookAir)[1-6],[0-9]|MacBook[1-8],[0-9]|MacBookPro(([1-9]|10),[0-9]|11,[0-3]))$"&#13;
not_ventura_regex="^(MacPro[1-6],[0-9]|iMac([1-9]|1[0-7]),[0-9]|(Macmini|MacBookAir)[1-7],[0-9]|MacBook[1-9],[0-9]|MacBookPro([1-9]|1[0-3]),[0-9])$"&#13;
not_sonoma_regex="^(MacPro[1-6],[0-9]|iMac([1-9]|1[0-8]),[0-9]|(Macmini|MacBookAir)[1-7],[0-9]|MacBook[\d,]+|MacBookPro([1-9]|1[0-4]),[0-9])$"&#13;
&#13;
##################################################&#13;
# Setup Functions&#13;
&#13;
write_to_ea_history() {&#13;
&#13;
	# Arguments&#13;
	# $1 = (str) Plist key that the message value will be assigned too&#13;
	# $2 = (str) Message that will be assigned to the key&#13;
&#13;
	local key="${1}"&#13;
	local value="${2}"&#13;
&#13;
	if [[ "${locally_log}" == "true" &amp;&amp; -z "${TEST_OS}" &amp;&amp; -z "${TEST_MODEL}" ]]; then&#13;
&#13;
		if [[ ! -e "${local_inventory}" ]]; then&#13;
&#13;
			/bin/mkdir -p "$( /usr/bin/dirname "${local_inventory}" )"&#13;
			/usr/bin/touch "${local_inventory}"&#13;
&#13;
		fi&#13;
&#13;
		/usr/bin/defaults write "${local_inventory}" "${key}" "${value}"&#13;
&#13;
	fi&#13;
&#13;
}&#13;
&#13;
model_check() {&#13;
	# $1 = Mac Model Identifier&#13;
	local model="${1}"&#13;
&#13;
	if [[ $model =~ $not_elcapitan_or_older_regex || $model =~ ^Xserve.*$ ]]; then&#13;
		echo "&lt;result&gt;Current Model Not Supported&lt;/result&gt;"&#13;
		exit 0&#13;
	elif [[ $model =~ $not_highsierra_regex ]]; then&#13;
		echo "El Capitan"&#13;
	elif [[ $model =~ $not_mojave_regex ]]; then&#13;
		echo "High Sierra"&#13;
	elif [[ $model =~ $not_catalina_regex ]]; then&#13;
		echo "Mojave"&#13;
	elif [[ $model =~ $not_bigsur_regex ]]; then&#13;
		echo "Catalina"&#13;
	elif [[ $model =~ $not_monterey_regex ]]; then&#13;
		echo "Big Sur"&#13;
	elif [[ $model =~ $not_ventura_regex ]]; then&#13;
		echo "Monterey"&#13;
	elif [[ $model =~ $not_sonoma_regex ]]; then&#13;
		echo "Ventura*"&#13;
	else&#13;
		echo "Sonoma*"&#13;
	fi&#13;
}&#13;
&#13;
os_check() {&#13;
	# $1 = Max supported OS version based on hardware model&#13;
	# $2 = Current OS major version&#13;
	# $3 = Current OS minor version&#13;
	# $4 = Current OS patch version&#13;
	local validate_os="${1}"&#13;
	local os_major="${2}"&#13;
	local os_minor="${3}"&#13;
	local os_patch="${4}"&#13;
&#13;
	if [[ ! "${mac_model}" =~ ^MacPro.*$ ]]; then&#13;
		# For ***non*** MacPro models:&#13;
&#13;
		if [[ "${validate_os}" == "Sonoma*" &amp;&amp; ( "${os_major}" -ge 11 || "${os_major}" -eq 10 &amp;&amp; "${os_minor}" -ge 9 ) ]]; then&#13;
			echo "Sonoma*"&#13;
		elif [[ "${validate_os}" == "Ventura*" &amp;&amp; ( "${os_major}" -ge 11 || "${os_major}" -eq 10 &amp;&amp; "${os_minor}" -ge 9 ) ]]; then&#13;
			echo "Ventura*"&#13;
		elif [[ "${validate_os}" == "Monterey" &amp;&amp; ( "${os_major}" -ge 11 || "${os_major}" -eq 10 &amp;&amp; "${os_minor}" -ge 9 ) ]]; then&#13;
			echo "Monterey"&#13;
		elif [[ "${validate_os}" == "Big Sur" &amp;&amp; ( "${os_major}" -ge 11 || "${os_major}" -eq 10 &amp;&amp; "${os_minor}" -ge 9 ) ]]; then&#13;
			echo "Big Sur"&#13;
		elif [[ "${validate_os}" == "Big Sur" &amp;&amp; ( "${os_major}" -ge 11 || "${os_major}" -eq 10 &amp;&amp; "${os_minor}" -le 8 ) ]]; then&#13;
			echo "El Capitan / OS Limitation"&#13;
		elif [[ "${validate_os}" == "Catalina" &amp;&amp; "${os_major}" -eq 10 &amp;&amp; "${os_minor}" -ge 9 ]]; then&#13;
			echo "Catalina"&#13;
		elif [[ "${validate_os}" == "Catalina" &amp;&amp; "${os_major}" -eq 10 &amp;&amp; "${os_minor}" -le 8 ]]; then&#13;
			echo "Mojave / OS Limitation"  # (Current OS Limitation, 10.15 Catalina)&#13;
		elif [[ "${validate_os}" == "Mojave" &amp;&amp; "${os_major}" -eq 10 &amp;&amp; "${os_minor}" -ge 8 ]]; then&#13;
			echo "Mojave"&#13;
		elif [[ "${validate_os}" == "High Sierra" &amp;&amp; "${os_major}" -eq 10 &amp;&amp; "${os_minor}" -ge 8 ]]; then&#13;
			echo "High Sierra"&#13;
		elif [[ "${validate_os}" == "High Sierra" &amp;&amp; "${os_major}" -eq 10 &amp;&amp; ( "${os_minor}" -ge 8 || "${os_minor}" -eq 7 &amp;&amp; "${os_patch}" -ge 5 ) ]]; then&#13;
			echo "Sierra / OS Limitation"  # (Current OS Limitation, 10.13 Compatible)&#13;
		elif [[ "${validate_os}" == "El Capitan" &amp;&amp; "${os_major}" -eq 10 &amp;&amp; ( "${os_minor}" -ge 7 || "${os_minor}" -eq 6 &amp;&amp; "${os_patch}" -ge 8 ) ]]; then&#13;
			echo "El Capitan"&#13;
		else&#13;
			echo "&lt;result&gt;Current OS Not Supported&lt;/result&gt;"&#13;
			exit 0&#13;
		fi&#13;
&#13;
	else&#13;
		# Because Apple had to make Mojave support for MacPro's difficult...  I have to add complexity to the original "simplistic" logic in this script.&#13;
&#13;
		if [[ $validate_os =~ (Sonoma|Ventura)\* ]]; then&#13;
			echo "${validate_os}"&#13;
&#13;
		elif [[ "${validate_os}" == "Monterey" ]]; then&#13;
			# Any MacPro model that is compatible with Monterey based on model identifier alone, is 100% compatible with Monterey,&#13;
			# since they wouldn't be compatible with any OS that is old, nor could they have incompatible hardware.&#13;
			# e.g. MacPro6,1 (i.e. 2013/Trash Cans) and newer&#13;
			echo "Monterey"&#13;
&#13;
		elif [[ "${validate_os}" == "Mojave" &amp;&amp; "${os_major}" -eq 10 &amp;&amp; ( "${os_minor}" -ge 14 || "${os_minor}" -eq 13 &amp;&amp; "${os_patch}" -ge 6 ) ]]; then&#13;
			# Supports Mojave, but required Metal Capable Graphics Cards and FileVault must be disabled.&#13;
			mac_pro_result="Mojave"&#13;
&#13;
			# Check if the Graphics Card supports Metal&#13;
			if [[ $( /usr/sbin/system_profiler SPDisplaysDataType | /usr/bin/awk -F 'Metal: ' '{print $2}' | /usr/bin/xargs ) != *"Supported"* ]]; then&#13;
				mac_pro_result+=" / GFX unsupported"&#13;
			fi&#13;
&#13;
			# Check if FileVault is enabled&#13;
			if [[ $( /usr/bin/fdesetup status | /usr/bin/awk -F 'FileVault is ' '{print $2}' | /usr/bin/xargs ) != "Off." ]]; then&#13;
				mac_pro_result+=" / FV Enabled"&#13;
			fi&#13;
&#13;
			echo "${mac_pro_result}"&#13;
&#13;
		elif [[ "${validate_os}" == "Mojave" &amp;&amp; "${os_major}" -eq 10 &amp;&amp; ( "${os_minor}" -le 12 || "${os_minor}" -eq 13 &amp;&amp; "${os_patch}" -le 5 ) ]]; then&#13;
			echo "High Sierra / OS Limitation"  # Supports Mojave or newer, but requires a stepped upgrade path&#13;
&#13;
		elif [[ "${validate_os}" == "Mojave" &amp;&amp; "${os_major}" -eq 10 &amp;&amp; ( "${os_minor}" -ge 8 || "${os_minor}" -eq 7 &amp;&amp; "${os_patch}" -ge 5 ) ]]; then&#13;
			echo "Sierra / OS Limitation"  # (Current OS Limitation, 10.13 Compatible)&#13;
&#13;
		elif [[ "${validate_os}" == "El Capitan" &amp;&amp; "${os_major}" -eq 10 &amp;&amp; ( "${os_minor}" -ge 7 || "${os_minor}" -eq 6 &amp;&amp; "${os_patch}" -ge 8 ) ]]; then&#13;
			echo "El Capitan"&#13;
&#13;
		else&#13;
			echo "&lt;result&gt;Current OS Not Supported&lt;/result&gt;"&#13;
			exit 0&#13;
		fi&#13;
&#13;
	fi&#13;
}&#13;
&#13;
check_ram_upgradeable() {&#13;
	ram_upgradeable=$( /usr/sbin/system_profiler SPMemoryDataType | /usr/bin/awk -F "Upgradeable Memory: " '{print $2}' | /usr/bin/xargs 2&amp;&gt; /dev/null )&#13;
	# ARM Macs do not return the "Upgradeable Memory:" attribute as of early 2022&#13;
	if [[ -z ${ram_upgradeable} ]]; then&#13;
		ram_upgradeable="No"&#13;
	fi&#13;
	echo "${ram_upgradeable}"&#13;
}&#13;
&#13;
# Check if the current RAM meets specs&#13;
ram_check() {&#13;
	# $1 = Max supported OS version based on hardware model&#13;
	local validate_os="${1}"&#13;
&#13;
	# Setting the minimum RAM required for compatibility&#13;
	minimum_ram_mojave_and_older=2&#13;
	minimum_ram_catalina_and_newer=4&#13;
&#13;
	# Get RAM Info&#13;
	system_ram=$(( $( /usr/sbin/sysctl -n hw.memsize ) / bytes_in_gigabytes ))&#13;
&#13;
	if [[ "${validate_os}" =~ ^(Catalina|Big[[:space:]]Sur|Monterey|(Sonoma|Ventura)\*)$ ]]; then&#13;
		# OS version requires 4GB RAM minimum&#13;
		# For Ventura and Sonoma, value's are inherited from Monterey, Apple has&#13;
		# not yet defined these requirements.&#13;
&#13;
		if [[ $system_ram -lt $minimum_ram_catalina_and_newer ]]; then&#13;
			# Based on RAM, device does not have enough to support Catalina or newer&#13;
&#13;
			if [[ "$( check_ram_upgradeable )" == "No" ]]; then&#13;
				# Device is not upgradable, so can never support Catalina or newer&#13;
&#13;
				if [[ $system_ram -ge $minimum_ram_mojave_and_older ]]; then&#13;
					# Device has enough RAM to support Mojave&#13;
					validate_os="Mojave"&#13;
				else&#13;
					# Device does not have enough RAM to support any upgrade!?&#13;
					echo "&lt;result&gt;Not Upgradable&lt;/result&gt;"&#13;
					exit 0&#13;
				fi&#13;
&#13;
			else&#13;
				# Device does not have enough RAM to upgrade currently, but RAM capacity can be increased.&#13;
				validate_os+=" / Insufficient RAM"&#13;
			fi&#13;
&#13;
		fi&#13;
&#13;
	else&#13;
		# Based on model, device supports Mojave or older&#13;
		if [[ $system_ram -lt $minimum_ram_mojave_and_older ]]; then&#13;
			# Based on RAM, device does not have enough to upgrade&#13;
&#13;
			if [[ "$( check_ram_upgradeable )" == "No" ]]; then&#13;
				# Device does not have enough RAM to support any upgrade!?&#13;
				echo "&lt;result&gt;Not Upgradable&lt;/result&gt;"&#13;
				exit 0&#13;
			else&#13;
				# Device does not have enough RAM to upgrade currently, but RAM capacity can be increased.&#13;
				validate_os+=" / Insufficient RAM"&#13;
			fi&#13;
&#13;
		fi&#13;
&#13;
	fi&#13;
&#13;
	echo "${validate_os}"&#13;
}&#13;
&#13;
# Check if the available free space is sufficient&#13;
storage_check() {&#13;
	# $1 = Max supported OS version based on hardware model&#13;
	# $2 = Current OS major version&#13;
	# $3 = Current OS minor version&#13;
	# $4 = Current OS patch version&#13;
	local validate_os="${1}"&#13;
	local os_major="${2}"&#13;
	local os_minor="${3}"&#13;
	local os_patch="${4}"&#13;
&#13;
	# Get free space on the boot disk&#13;
	# storage_free_space=$( /usr/bin/osascript -l 'JavaScript' -e "ObjC.import('Foundation'); var freeSpaceBytesRef=Ref(); $.NSURL.fileURLWithPath('/').getResourceValueForKeyError(freeSpaceBytesRef, 'NSURLVolumeAvailableCapacityForImportantUsageKey', null); Math.round(ObjC.unwrap(freeSpaceBytesRef[0]))" )&#13;
	storage_free_space=$( /usr/bin/osascript -l "JavaScript" -e '&#13;
&#13;
		ObjC.import("Foundation");&#13;
		var freeSpaceBytesRef=Ref();&#13;
&#13;
		$.NSURL.fileURLWithPath("/").getResourceValueForKeyError(&#13;
			freeSpaceBytesRef,&#13;
			"NSURLVolumeAvailableCapacityForImportantUsageKey",&#13;
			null&#13;
		);&#13;
&#13;
		Math.round(&#13;
			ObjC.unwrap(&#13;
				freeSpaceBytesRef[0]&#13;
			)&#13;
		)&#13;
	')&#13;
&#13;
	# Workaround for NSURLVolumeAvailableCapacityForImportantUsageKey returning 0 if no user is logged in - use NSURLVolumeAvailableCapacityKey instead&#13;
	if [[ ${storage_free_space} -eq 0 ]]; then&#13;
		storage_free_space=$( /usr/bin/osascript -l "JavaScript" -e '&#13;
&#13;
			ObjC.import("Foundation");&#13;
			var freeSpaceBytesRef=Ref();&#13;
&#13;
			$.NSURL.fileURLWithPath("/").getResourceValueForKeyError(&#13;
				freeSpaceBytesRef,&#13;
				"NSURLVolumeAvailableCapacityKey",&#13;
				null&#13;
			);&#13;
&#13;
			Math.round(&#13;
				ObjC.unwrap(&#13;
					freeSpaceBytesRef[0]&#13;
				)&#13;
			)&#13;
		')&#13;
	fi&#13;
&#13;
	# Set the required free space to compare.  Set space requirement in bytes:  /usr/bin/bc &lt;&lt;&lt; "&lt;space in GB&gt; * 1073741824"&#13;
	case "${validate_os}" in&#13;
		"Sonoma*"* )&#13;
			# Value's inherited from Monterey, Apple has not defined these requirements&#13;
			required_free_space_newer="27917287424" # 26GB if Sierra or later&#13;
			os_newer="10.12.0"&#13;
			required_free_space_older="47244640256" # 44GB if El Capitan or earlier&#13;
			os_older="10.11.0"&#13;
		;;&#13;
		"Ventura*"* )&#13;
			# Value's inherited from Monterey, Apple has not defined these requirements&#13;
			required_free_space_newer="27917287424" # 26GB if Sierra or later&#13;
			os_newer="10.12.0"&#13;
			required_free_space_older="47244640256" # 44GB if El Capitan or earlier&#13;
			os_older="10.11.0"&#13;
		;;&#13;
		"Monterey"* )&#13;
			required_free_space_newer="27917287424" # 26GB if Sierra or later&#13;
			os_newer="10.12.0"&#13;
			required_free_space_older="47244640256" # 44GB if El Capitan or earlier&#13;
			os_older="10.11.0"&#13;
		;;&#13;
		"Big Sur"* )&#13;
			required_free_space_newer="38117834752" # 35.5GB if Sierra or later&#13;
			os_newer="10.12.0"&#13;
			required_free_space_older="47781511168" # 44.5GB if El Capitan or earlier&#13;
			os_older="10.11.0"&#13;
		;;&#13;
		"Catalina"*|"Mojave"* )&#13;
			required_free_space_newer="13421772800" # 12.5GB if El Capitan 10.11.5 or later&#13;
			os_newer="10.11.5"&#13;
			required_free_space_older="19864223744" # 18.5GB if Yosemite or earlier&#13;
			os_older="10.10.0"&#13;
		;;&#13;
		"High Sierra"* )&#13;
			required_free_space="15354508084" # 14.3GB&#13;
		;;&#13;
		"Sierra"*|"El Capitan"* )&#13;
			required_free_space="9448928052" # 8.8GB&#13;
		;;&#13;
		* )&#13;
			echo "&lt;result&gt;Not Supported&lt;/result&gt;"&#13;
			exit 0&#13;
		;;&#13;
	esac&#13;
&#13;
	if [[ -z $required_free_space ]]; then&#13;
		newer_os_major=$( echo "${os_newer}" | /usr/bin/awk -F '.' '{print $1}' )&#13;
		newer_os_minor=$( echo "${os_newer}" | /usr/bin/awk -F '.' '{print $2}' )&#13;
		newer_os_patch=$( echo "${os_newer}" | /usr/bin/awk -F '.' '{print $3}' )&#13;
		older_os_major=$( echo "${os_older}" | /usr/bin/awk -F '.' '{print $1}' )&#13;
		older_os_minor=$( echo "${os_older}" | /usr/bin/awk -F '.' '{print $2}' )&#13;
		older_os_patch=$( echo "${os_older}" | /usr/bin/awk -F '.' '{print $3}' )&#13;
&#13;
		# Check newer&#13;
		if [[ "${os_major}" -gt "${newer_os_major}" ||&#13;
			( "${os_major}" -eq "${newer_os_major}" &amp;&amp;&#13;
			  "${os_minor}" -ge "${newer_os_minor}" &amp;&amp;&#13;
			  "${os_patch}" -ge "${newer_os_patch}" ) ]]; then&#13;
&#13;
			required_free_space=$required_free_space_newer&#13;
&#13;
		# Check older&#13;
		elif [[ "${os_major}" -gt "${older_os_major}" ||&#13;
			  ( "${os_major}" -eq "${older_os_major}" &amp;&amp;&#13;
				"${os_minor}" -ge "${older_os_minor}" &amp;&amp;&#13;
				"${os_patch}" -ge "${older_os_patch}" ) ]]; then&#13;
&#13;
			required_free_space=$required_free_space_older&#13;
&#13;
		fi&#13;
&#13;
	fi&#13;
&#13;
	if [[  $storage_free_space -le $required_free_space ]]; then&#13;
		echo " / Insufficient Storage"&#13;
	fi&#13;
&#13;
}&#13;
&#13;
##################################################&#13;
# Bits Staged...&#13;
&#13;
# Set the number of bytes in a gigabyte&#13;
bytes_in_gigabytes="1073741824" # $((1024 * 1024 * 1024)) # Transforms one gigabyte into bytes&#13;
&#13;
# Get the current OS version&#13;
if [[ -z "${TEST_OS}" ]]; then&#13;
	os_version=$( /usr/bin/sw_vers -productVersion )&#13;
else&#13;
	os_version="${TEST_OS}"&#13;
	echo "Test OS value: ${TEST_OS}"&#13;
fi&#13;
&#13;
current_os_major=$( echo "${os_version}" | /usr/bin/awk -F '.' '{print $1}' )&#13;
current_os_minor=$( echo "${os_version}" | /usr/bin/awk -F '.' '{print $2}' )&#13;
current_os_patch=$( echo "${os_version}" | /usr/bin/awk -F '.' '{print $3}' )&#13;
&#13;
# Get the Model Type&#13;
if [[ -z "${TEST_MODEL}" ]]; then&#13;
	mac_model=$( /usr/sbin/sysctl -n hw.model )&#13;
else&#13;
	mac_model="${TEST_MODEL}"&#13;
	echo "Test Model value: ${TEST_MODEL}"&#13;
fi&#13;
&#13;
# Check for compatibility&#13;
model_result=$( model_check "${mac_model}" )&#13;
&#13;
case "${model_result}" in&#13;
	"Sonoma*" )&#13;
		version_string="14"&#13;
	;;&#13;
	"Ventura*" )&#13;
		version_string="13"&#13;
	;;&#13;
	"Monterey" )&#13;
		version_string="12"&#13;
	;;&#13;
	"Big Sur" )&#13;
		version_string="11"&#13;
	;;&#13;
	"Catalina" )&#13;
		version_string="10.15"&#13;
	;;&#13;
	"Mojave" )&#13;
		version_string="10.14"&#13;
	;;&#13;
	"High Sierra" )&#13;
		version_string="10.13"&#13;
	;;&#13;
	"Sierra" )&#13;
		version_string="10.12"&#13;
	;;&#13;
	"El Capitan" )&#13;
		version_string="10.11"&#13;
	;;&#13;
esac&#13;
&#13;
if [[ "${version_string}" =~ 10.+ ]]; then&#13;
	test_running_unsupported="${current_os_major}.${current_os_minor}"&#13;
else&#13;
	test_running_unsupported="${current_os_major}"&#13;
fi&#13;
&#13;
if [[ $( /usr/bin/bc &lt;&lt;&lt; "${test_running_unsupported} &gt;= ${version_string}" ) -eq 1 ]]; then&#13;
	# Check to see if device is running an OS version newer than what it supports.&#13;
	# If so, no reason to check further specifications.&#13;
	report_result="${model_result} (Model doesn't support current OS version)"&#13;
&#13;
elif [[&#13;
		"${version_string}" == "${current_os_major}.${current_os_minor}" ||&#13;
		"${version_string}" == "${current_os_major}"&#13;
	]]; then&#13;
	# Check to see if device is already running the latest supported OS.&#13;
	# If so, no reason to check further specifications.&#13;
&#13;
	report_result="${model_result}"&#13;
&#13;
else&#13;
&#13;
	os_result=$( os_check  "${model_result}" "${current_os_major}" "${current_os_minor}" "${current_os_patch}" "${mac_model}" )&#13;
	ram_check_results=$( ram_check "${os_result}" )&#13;
	storage_check_results=$( storage_check "${os_result}" "${current_os_major}" "${current_os_minor}" "${current_os_patch}" )&#13;
&#13;
	report_result="${ram_check_results}${storage_check_results}"&#13;
	model_result="${ram_check_results}${storage_check_results}"&#13;
&#13;
fi&#13;
&#13;
echo "&lt;result&gt;${report_result}&lt;/result&gt;"&#13;
write_to_ea_history "latest_os_supported" "${model_result}"&#13;
exit 0</scriptContentsMac>
</extensionAttribute>
